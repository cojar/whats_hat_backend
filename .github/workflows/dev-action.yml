name: 'dev-action'
on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'README.md'
    branches:
      - 'dev'
permissions: write-all
jobs:
  build:
    name: 빌드
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: jdk 19 설치
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: 'gradle'
      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew
      - name: gradle 빌드
        run: ./gradlew build -x test --no-daemon
      - name: build 폴더를 캐시에 저장
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: build
          retention-days: 1
  tag:
    name: 태그 생성
    needs: build
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: mathieudutour/github-tag-action@v6.1
        id: tag_version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
  docker:
    name: 도커 이미지 빌드와 푸시
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - uses: actions/checkout@v3
      - name: build 가져오기
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: build
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: ghcr.io 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: 앱 설정 파일 생성
        env:
          ACTIONS_STEP_DEBUG: true
          APP_PROP: ${{ secrets.APP_PROP }}
          APP_PROD_PROP: ${{ secrets.APP_PROD_PROP }}
          APP_TEST_PROP: ${{ secrets.APP_TEST_PROP }}
        run:
          echo "$APP_PROP" > ./src/main/resources/application.properties &&
          echo "$APP_PROD_PROP" > ./src/main/resources/application-prod.properties &&
          echo "$APP_TEST_PROP" > ./src/test/resources/application-test.properties &&
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/whats_hot:${{ needs.tag.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/whats_hot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    name: 도커 배포
    needs: [tag, docker]
    runs-on: [ self-hosted, work-1 ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: Docker run
        run: |
          isRunning=$(docker ps -q -f name=whats_hot)
          if [ -n "$isRunning" ]; then
            docker stop whats_hot
            docker rm whats_hot
          fi
          isExist=$(docker images -q ghcr.io/${{ env.OWNER_LC }}/whats_hot:latest)
          if [ -n "$isExist" ]; then
            docker rmi ghcr.io/${{ env.OWNER_LC }}/whats_hot:latest
          fi
          docker run -d -p 8084:8080 -v /docker_projects/whats_hot/volumes/file:/file --name whats_hot --restart always ghcr.io/${{ env.OWNER_LC }}/whats_hot:latest
